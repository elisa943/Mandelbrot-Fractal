#load "graphics.cma";;
open Graphics;;
open_graph ":0";;
resize_window 800 800;;

let maxIteration = 50;;

let epsilon = 0.05;;

type complexe = {mutable a: float; mutable b: float};;

let moduleComplexe c = 
	Float.sqrt (c.a*.c.a +. c.b*.c.b);;
	
let additionComplexe z1 z2 = 
	{a = z1.a +. z2.a; b = z1.b +. z2.b};;

let multiplicationComplexe z1 z2 = 
{a = z1.a *. z2.a -. z1.b *. z2.b; b = z2.a *. z1.b +. z1.a *. z2.b};;

let translation x y = (x *. 200. +. 800., y *. 200. +. 400.);;

let affiche (x,y) = 
	plot (int_of_float x) (int_of_float y);;

let mandelbrot c = 
	let z = ref {a = 0.; b = 0.} in 
	let n = ref 0 in 
	while moduleComplexe (!z) <= 2. && !n < maxIteration do
		z := additionComplexe (multiplicationComplexe !z !z) c;
		incr n
	done;
	!n;;

let sets_color n = 
	if n < maxIteration then
		let color = 255 - int_of_float (float_of_int (n*255) /. (float_of_int maxIteration)) in 
		set_color (rgb color color color)
	else
		set_color black;;
					
let main () = 
	let x = ref (-.2.) in 
	let y = ref (-.2.) in 
	while -2. <= !x && !x <= 2. do
		while -2. <= !y && !y <= 2. do
			let n = mandelbrot {a = !x; b = !y} in
			begin 
				print_int n;
				print_float (!x);
				sets_color n;
				affiche (translation !x !y);
				
			end;
			y := !y +. epsilon
		done;
		x := !x +. epsilon
	done;;


for i=0 to 799 do
	for j=0 to 799 do
		let c = {a = float_of_int i; b = float_of_int j} in 
		let n = mandelbrot c in 
			sets_color n;
			plot i j
	done
done;;









